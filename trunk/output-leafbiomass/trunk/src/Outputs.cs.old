//  Copyright 2007 Conservation Biology Institute
//  Authors:  Robert M. Scheller
//  License:  Available at  
//  http://www.landis-ii.org/developers/LANDIS-IISourceCodeLicenseAgreement.pdf

using Landis.Cohorts;
using Landis.Ecoregions;
using Landis.Landscape;
using Landis.Species;
using Landis.RasterIO;
using System.IO;
using System;
using System.Collections.Generic;


namespace Landis.Output.Biomass
{
    public class Outputs
    {
    
        //private static string mapNameTemplate;
        // private static string logFileName;
        private static StreamWriter log;

        //---------------------------------------------------------------------
        public static void Initialize(IEnumerable<ISpecies> selectedSpecies)
        {
        
            string logFileName   = "spp-biomass-log.csv"; 
            UI.WriteLine("   Opening species biomass log file \"{0}\" ...", logFileName);
            try {
                log = Data.CreateTextFile(logFileName);
            }
            catch (Exception err) {
                string mesg = string.Format("{0}", err.Message);
                throw new System.ApplicationException(mesg);
            }
            
            log.AutoFlush = true;
            log.Write("Time, Ecoregion, NumSites,");
            
            foreach (ISpecies species in selectedSpecies) 
                log.Write("{0},", species.Name);
            
            log.WriteLine("");


        }


        //---------------------------------------------------------------------

        private static void WriteLogFile(IEnumerable<ISpecies> selectedSpecies, ILandscapeCohorts cohorts)
        {
            
            int numSpp = 0;
            foreach (ISpecies species in selectedSpecies) 
                numSpp++;
            
            double[,] allSppEcos = new double[Model.Core.Ecoregions.Count, numSpp];
            
            int[] activeSiteCount = new int[Model.Core.Ecoregions.Count];

            foreach (IEcoregion ecoregion in Model.Core.Ecoregions) {
                for (int i = 0; i < numSpp; i++)
                    allSppEcos[ecoregion.Index, numSpp] = 0.0;
                
                activeSiteCount[ecoregion.Index] = 0;
            }



            foreach (ActiveSite site in Model.Core.Landscape)
            {
                IEcoregion ecoregion = Model.Core.Ecoregion[site];
                
                int sppCnt = 0;
                foreach (ISpecies species in selectedSpecies) {
                    allSppEcos[ecoregion.Index, sppCnt] += Util.ComputeBiomass(cohorts[site][species]);
                    sppCnt++;
                }
                
                activeSiteCount[ecoregion.Index]++;
            }
            
            foreach (IEcoregion ecoregion in Model.Core.Ecoregions)
            {
                log.Write("{0}, {1}, {2}, ", 
                    Model.Core.CurrentTime,                 // 0
                    ecoregion.Name,                         // 1
                    activeSiteCount[ecoregion.Index]       // 2
                    );
                int sppCnt = 0;
                foreach (ISpecies species in selectedSpecies) {
                    log.Write("{0}, ",
                        (allSppEcos[ecoregion.Index, sppCnt] / (double) activeSiteCount[ecoregion.Index])
                        );
                    
                    sppCnt++;
                }

                log.WriteLine("");
            }
        }
    }
}
