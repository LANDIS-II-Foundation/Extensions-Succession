//  Copyright 2007-2010 University of Nevada, Portland State University
//  Authors:  Sarah Ganschow, Robert M. Scheller
//  License:  Available at
//  http://www.landis-ii.org/developers/LANDIS-IISourceCodeLicenseAgreement.pdf

using Edu.Wisc.Forest.Flel.Util;
using System;

using Landis.Ecoregions;
using Landis.Landscape;
using Landis.Species;

namespace Landis.Biomass.NuCycling.Succession
{
    /// <summary>
    /// </summary>
    public class AvailableN
    {

        /// <summary>
        /// Reduces Available N depending upon how much N was removed through growth (ANPP).
        /// </summary>
        public static double CohortUptakeAvailableN(double ANPPactual, ActiveSite site, ICohort cohort, double fractionLeaf)
        {

            double ANPPleaf = (ANPPactual * fractionLeaf);
            double ANPPwood = (ANPPactual * (1.0 - fractionLeaf));
            double ANPPcoarseRoot = Roots.CalculateCoarseRoot(ANPPwood, SpeciesData.LeafLongevity[cohort.Species]);
            double ANPPfineRoot = Roots.CalculateFineRoot(ANPPleaf, SpeciesData.LeafLongevity[cohort.Species]);

            // leafN:  ANPPleaf is multiplied by litter fraction N assuming that the difference
            // between leaf and litter N is translocated and cycled within the cohort.
            double leafN = ANPPleaf * SpeciesData.LitterFractionN[cohort.Species];
            double woodN = ANPPwood * SpeciesData.WoodFractionN[cohort.Species];
            double coarseRootN = ANPPcoarseRoot * SpeciesData.WoodFractionN[cohort.Species];
            double fineRootN = ANPPfineRoot * SpeciesData.FRootFractionN[cohort.Species];

            double Nreduction = leafN + woodN + coarseRootN + fineRootN;

            Nreduction = Math.Max(Nreduction, 0.0);

            SiteVars.MineralSoil[site].ContentN -= Nreduction;

            return Nreduction;
        }

        /// <summary>
        /// Reduces growth (ANPP) depending upon how much N is available.
        /// </summary>
        public static double GrowthReductionAvailableN(ActiveSite site, ISpecies species)
        {

            double availableN = GetAvailableN(site);
            double concNinLeaves = SpeciesData.LeafLignin[species];
            int Ntolerance = SpeciesData.NTolerance[species];
            //Calc species soil N growth multiplier (Mitchell and Chandler.
            //1939. Black Rock Forest Bull. 11, Aber et al. 1979. Can. J. For.
            //Res. 9:10 - 14.
            double a, b, c, d, e;
            //double d, e;
            double soilNitrogenMultiplier = 0.0;

            if (Ntolerance == 1)  //Intolerant to low nitrogen
            {
                a = 2.99;
                b = 207.43;
                c = 0.00175;
                d = -1.7;
                e = 1.0;

                soilNitrogenMultiplier = d + e * (a * (1 - (Math.Pow(10,
                    (double)(-1 * c * (b + (-170 + (SiteVars.MineralSoil[site].ContentN * 4))))))));

            }
            else if (Ntolerance == 2) //Mid-tolerant of low nitrogen
            {
                a = 2.94;
                b = 117.52;
                c = 0.00234;
                d = -1.0;
                e = 0.8;

                soilNitrogenMultiplier = d + e * (a * (1 - (Math.Pow(10,
                    (double)(-1 * c * (b + (-170 + (SiteVars.MineralSoil[site].ContentN * 4))))))));


            }
            else if (Ntolerance == 3) //Tolerant of low nitrogen
            {
                a = 2.79;
                b = 219.77;
                c = 0.00179;
                d = -0.3;
                e = 0.6;

                soilNitrogenMultiplier = d + e * (a * (1 - (Math.Pow(10,
                    (double)(-1 * c * (b + (-170 + (SiteVars.MineralSoil[site].ContentN * 4))))))));

            }
            else if (Ntolerance >= 4) //Not at all limited by nitrogen
            {
                //Needs further review: NTolerance = 4, 5, or 6 means N-fixer
                //Adds N to the soil from nowhere--value needs to be scaled
                //SiteVars.MineralSoil[site].ContentN += 5;

                soilNitrogenMultiplier = 1.0;
            }
            else
                throw new System.ApplicationException("Error: Incorrect N tolerance value .");

            soilNitrogenMultiplier = Math.Min(1.0, soilNitrogenMultiplier);
            soilNitrogenMultiplier = Math.Max(0.0, soilNitrogenMultiplier);


            return soilNitrogenMultiplier;
        }

        private static double GetAvailableN(ActiveSite site)
        {
            double availN = SiteVars.MineralSoil[site].ContentN;

            return availN;
        }
    }
}
